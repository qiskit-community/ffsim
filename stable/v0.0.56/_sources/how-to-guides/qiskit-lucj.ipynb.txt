{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "851418ae",
   "metadata": {},
   "source": [
    "# How to build Qiskit circuits for the LUCJ ansatz\n",
    "\n",
    "This guide provides some examples of building and transpiling Qiskit circuits to implement the [LUCJ ansatz](../explanations/lucj.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8301b83e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyscf\n",
    "from qiskit.circuit import QuantumCircuit, QuantumRegister\n",
    "from qiskit.providers.fake_provider import GenericBackendV2\n",
    "from qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager\n",
    "\n",
    "import ffsim"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6c65395",
   "metadata": {},
   "source": [
    "## LUCJ circuit for a closed-shell molecule\n",
    "\n",
    "For a closed-shell system, use the spin-balanced LUCJ ansatz. This example creates an LUCJ circuit for a nitrogen molecule in the 6-31g basis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a3c1abb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "converged SCF energy = -108.835236570774\n",
      "norb = 16\n",
      "nelec = (5, 5)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<class 'pyscf.cc.ccsd.CCSD'> does not have attributes  converged\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E(CCSD) = -109.0398256929733  E_corr = -0.2045891221988306\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "OrderedDict([('xx_plus_yy', 580),\n",
       "             ('p', 64),\n",
       "             ('cp', 52),\n",
       "             ('measure', 32),\n",
       "             ('x', 10),\n",
       "             ('barrier', 1)])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build N2 molecule\n",
    "mol = pyscf.gto.Mole()\n",
    "mol.build(\n",
    "    atom=[[\"N\", (0, 0, 0)], [\"N\", (1.0, 0, 0)]],\n",
    "    basis=\"6-31g\",\n",
    "    symmetry=\"Dooh\",\n",
    ")\n",
    "\n",
    "# Define active space\n",
    "n_frozen = 2\n",
    "active_space = range(n_frozen, mol.nao_nr())\n",
    "\n",
    "# Get molecular data and Hamiltonian\n",
    "scf = pyscf.scf.RHF(mol).run()\n",
    "mol_data = ffsim.MolecularData.from_scf(scf, active_space=active_space)\n",
    "norb, nelec = mol_data.norb, mol_data.nelec\n",
    "mol_hamiltonian = mol_data.hamiltonian\n",
    "print(f\"norb = {norb}\")\n",
    "print(f\"nelec = {nelec}\")\n",
    "\n",
    "# Get CCSD t2 amplitudes for initializing the ansatz\n",
    "ccsd = pyscf.cc.CCSD(\n",
    "    scf, frozen=[i for i in range(mol.nao_nr()) if i not in active_space]\n",
    ").run()\n",
    "\n",
    "# Use 2 ansatz layers\n",
    "n_reps = 2\n",
    "# Use interactions implementable on a square lattice\n",
    "pairs_aa = [(p, p + 1) for p in range(norb - 1)]\n",
    "pairs_ab = [(p, p) for p in range(norb)]\n",
    "ucj_op = ffsim.UCJOpSpinBalanced.from_t_amplitudes(\n",
    "    ccsd.t2, n_reps=n_reps, interaction_pairs=(pairs_aa, pairs_ab)\n",
    ")\n",
    "\n",
    "# Construct circuit\n",
    "qubits = QuantumRegister(2 * norb)\n",
    "circuit = QuantumCircuit(qubits)\n",
    "circuit.append(ffsim.qiskit.PrepareHartreeFockJW(norb, nelec), qubits)\n",
    "circuit.append(ffsim.qiskit.UCJOpSpinBalancedJW(ucj_op), qubits)\n",
    "circuit.measure_all()\n",
    "\n",
    "# Create a generic backend and transpile the circuit to it\n",
    "backend = GenericBackendV2(2 * norb, basis_gates=[\"cp\", \"xx_plus_yy\", \"p\", \"x\"])\n",
    "pass_manager = generate_preset_pass_manager(optimization_level=3, backend=backend)\n",
    "# Set the pre-initialization stage of the pass manager with passes suggested by ffsim\n",
    "pass_manager.pre_init = ffsim.qiskit.PRE_INIT\n",
    "transpiled = pass_manager.run(circuit)\n",
    "\n",
    "transpiled.count_ops()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42f81ad1",
   "metadata": {},
   "source": [
    "## LUCJ circuit for an open-shell molecule\n",
    "\n",
    "For an open-shell system, use the spin-unbalanced LUCJ ansatz. This example creates an LUCJ circuit for a hydroxyl radical in the 6-31g basis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9cbafb1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SCF not converged.\n",
      "SCF energy = -75.3484557057027\n",
      "norb = 11\n",
      "nelec = (5, 4)\n",
      "\n",
      "WARN: RCCSD method does not support ROHF method. ROHF object is converted to UHF object and UCCSD method is called.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<class 'pyscf.cc.uccsd.UCCSD'> does not have attributes  converged\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "E(UCCSD) = -75.45619739149967  E_corr = -0.1077416857969319\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "OrderedDict([('xx_plus_yy', 696),\n",
       "             ('cp', 116),\n",
       "             ('p', 103),\n",
       "             ('measure', 22),\n",
       "             ('x', 9),\n",
       "             ('barrier', 1)])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build HO molecule\n",
    "mol = pyscf.gto.Mole()\n",
    "mol.build(\n",
    "    atom=[[\"H\", (0, 0, 0)], [\"O\", (0, 0, 1.1)]],\n",
    "    basis=\"6-31g\",\n",
    "    spin=1,\n",
    "    symmetry=\"Coov\",\n",
    ")\n",
    "\n",
    "# Get molecular data and Hamiltonian\n",
    "scf = pyscf.scf.ROHF(mol).run()\n",
    "mol_data = ffsim.MolecularData.from_scf(scf)\n",
    "norb, nelec = mol_data.norb, mol_data.nelec\n",
    "mol_hamiltonian = mol_data.hamiltonian\n",
    "print(f\"norb = {norb}\")\n",
    "print(f\"nelec = {nelec}\")\n",
    "\n",
    "# Get CCSD t2 amplitudes for initializing the ansatz\n",
    "ccsd = pyscf.cc.CCSD(scf).run()\n",
    "\n",
    "# Use 4 layers from opposite-spin amplitudes and 2 layers from same-spin amplitudes\n",
    "n_reps = (4, 2)\n",
    "# Use interactions implementable on a square lattice\n",
    "pairs_aa = [(p, p + 1) for p in range(norb - 1)]\n",
    "pairs_ab = [(p, p) for p in range(norb)]\n",
    "pairs_bb = [(p, p + 1) for p in range(norb - 1)]\n",
    "ucj_op = ffsim.UCJOpSpinUnbalanced.from_t_amplitudes(\n",
    "    ccsd.t2, n_reps=n_reps, interaction_pairs=(pairs_aa, pairs_ab, pairs_bb)\n",
    ")\n",
    "\n",
    "# Construct circuit\n",
    "qubits = QuantumRegister(2 * norb)\n",
    "circuit = QuantumCircuit(qubits)\n",
    "circuit.append(ffsim.qiskit.PrepareHartreeFockJW(norb, nelec), qubits)\n",
    "circuit.append(ffsim.qiskit.UCJOpSpinUnbalancedJW(ucj_op), qubits)\n",
    "circuit.measure_all()\n",
    "\n",
    "# Create a generic backend and transpile the circuit to it\n",
    "backend = GenericBackendV2(2 * norb, basis_gates=[\"cp\", \"xx_plus_yy\", \"p\", \"x\"])\n",
    "pass_manager = generate_preset_pass_manager(optimization_level=3, backend=backend)\n",
    "# Set the pre-initialization stage of the pass manager with passes suggested by ffsim\n",
    "pass_manager.pre_init = ffsim.qiskit.PRE_INIT\n",
    "transpiled = pass_manager.run(circuit)\n",
    "\n",
    "transpiled.count_ops()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ffsim",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
